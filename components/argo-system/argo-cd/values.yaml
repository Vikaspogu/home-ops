fullnameOverride: "argocd"
crds:
  install: true
  # -- Keep CRDs on chart uninstall
  keep: false
configs:
  params:
    server.insecure: true
    controller.diff.server.side: true
  cm:
    accounts.admin: apiKey
    accounts.readonly: apiKey
    rbac:
      policy.csv: |
        g, readonly, role:readonly
    statusbadge.enabled: true
    kustomize.buildOptions: "--enable-alpha-plugins --enable-exec  --load-restrictor LoadRestrictionsNone"
    # Custom health check
    resource.customizations.health.certmanager.k8s.io_Certificate: |
      hs = {}
      if obj.status ~= nil then
        if obj.status.conditions ~= nil then
          for i, condition in ipairs(obj.status.conditions) do
            if condition.type == "Ready" and condition.status == "False" then
              hs.status = "Degraded"
              hs.message = condition.message
              return hs
            end
            if condition.type == "Ready" and condition.status == "True" then
              hs.status = "Healthy"
              hs.message = condition.message
              return hs
            end
          end
        end
      end
      hs.status = "Progressing"
      hs.message = "Waiting for certificate"
      return hs
    resource.customizations.health.certmanager.external-secrets.io_ExternalSecret: |
      hs = {}
      if obj.status ~= nil then
        if obj.status.conditions ~= nil then
          for i, condition in ipairs(obj.status.conditions) do
            if condition.type == "Ready" and condition.status == "False" then
              hs.status = "Degraded"
              hs.message = condition.message
              return hs
            end
            if condition.type == "Ready" and condition.status == "True" then
              hs.status = "Healthy"
              hs.message = condition.message
              return hs
            end
          end
        end
      end
      hs.status = "Progressing"
      hs.message = "Waiting for ExternalSecret"
      return hs
    resource.customizations.health.external-secrets.io_ClusterSecretStore: |
      hs = {}
      if obj.status ~= nil then
        if obj.status.conditions ~= nil then
          for i, condition in ipairs(obj.status.conditions) do
            if condition.type == "Ready" and condition.status == "False" then
              hs.status = "Degraded"
              hs.message = condition.message
              return hs
            end
            if condition.type == "Ready" and condition.status == "True" then
              hs.status = "Healthy"
              hs.message = condition.message
              return hs
            end
          end
        end
      end
      hs.status = "Progressing"
      hs.message = "Waiting for ClusterSecretStore"
      return hs
    resource.customizations.health.argoproj.io_Application: |
      hs = {}
      if obj.status ~= nil then
        if obj.status.health ~= nil and obj.status.health.status == "Healthy" then
          hs.status = "Healthy"
          hs.message = obj.status.health.message
          return hs
        end

        if obj.status.health ~= nil and obj.status.health.status == "Degraded" then
          hs.status = "Degraded"
          hs.message = obj.status.health.message
          return hs
        end

        -- ðŸ‘‡ Custom rule: mark Unknown as Degraded
        if obj.status.health ~= nil and obj.status.health.status == "Unknown" then
          hs.status = "Degraded"
          hs.message = "Marked Degraded because health is Unknown"
          return hs
        end
      end

      -- Default fallback
      hs.status = "Progressing"
      hs.message = "Waiting for status..."
      return hs
    resource.customizations.health.certmanager.certmanager.io_Certificate: |
      hs = {}
      if obj.status ~= nil then
        if obj.status.conditions ~= nil then
          for i, condition in ipairs(obj.status.conditions) do
            if condition.type == "Issuing" and condition.status == "True" then
              hs.status = "Progressing"
              hs.message = condition.message
              return hs
            end
            if condition.type == "Ready" and condition.status == "False" then
              hs.status = "Degraded"
              hs.message = condition.message
              return hs
            end
            if condition.type == "Ready" and condition.status == "True" then
              hs.status = "Healthy"
              hs.message = condition.message
              return hs
            end
          end
        end
      end

      hs.status = "Progressing"
      hs.message = "Waiting for certificate"
      return hs
    resource.customizations.health.certmanager.certmanager.io_ClusterIssuer: |
      hs = {}
      if obj.status ~= nil then
        if obj.status.conditions ~= nil then
          for i, condition in ipairs(obj.status.conditions) do
            if condition.type == "Ready" and condition.status == "False" then
              hs.status = "Degraded"
              hs.message = condition.message
              return hs
            end
            if condition.type == "Ready" and condition.status == "True" then
              hs.status = "Healthy"
              hs.message = condition.message
              return hs
            end
          end
        end
      end

      hs.status = "Progressing"
      hs.message = "Initializing issuer"
      return hs
  secret:
    argocdServerAdminPassword: $2a$10$GRTeAT.0uRW2HUk59OJn6OjYtWPROWimrka/EGkgDUsiNvmyep05e
    argocdServerAdminPasswordMtime: 2025-08-26T18:15:18
controller:
  metrics:
    enabled: true
    applicationLabels:
      enabled: true
    serviceMonitor: &service-monitor
      enabled: true
      additionalLabels:
        release: kube-prometheus-stack
dex:
  metrics:
    enabled: true
    serviceMonitor: *service-monitor
redis:
  metrics:
    enabled: true
    serviceMonitor: *service-monitor
server:
  allowAnyNamespace: true
  metrics:
    enabled: true
    serviceMonitor: *service-monitor
notifications:
  metrics:
    enabled: true
    serviceMonitor: *service-monitor
repoServer:
  deploymentAnnotations:
    reloader.stakater.com/auto: "true"
  extraContainers:
    - name: setenv-plugin
      command: [/var/run/argocd/argocd-cmp-server]
      env:
        - name: XDG_CONFIG_HOME
          value: /.config
        - name: SOPS_AGE_KEY_FILE
          value: /.config/sops/age/keys.txt
        - name: KUSTOMIZE_PLUGIN_HOME
          value: /etc/kustomize/plugin
      envFrom:
        - secretRef:
            name: environment-variables
      image: quay.io/raffaelespazzoli/raffa-envsub:1.1
      securityContext:
        runAsNonRoot: true
        runAsUser: 999
      imagePullPolicy: Always
      volumeMounts:
        - mountPath: /var/run/argocd
          name: var-files
        - mountPath: /home/argocd/cmp-server/plugins
          name: plugins
        - mountPath: /tmp
          name: tmp
        - mountPath: /home/argocd/cmp-server/config/plugin.yaml
          subPath: plugin.yaml
          name: setenv-cmp-plugin
        - mountPath: /etc/kustomize/plugin/viaduct.ai/v1/ksops
          name: ksops-generator
        - mountPath: /.config/sops/age/keys.txt
          name: sops-age
          subPath: keys.txt
  serviceAccount:
    create: true
    name: argocd-repo-server
  rbac:
    - apiGroups:
        - ""
      resources:
        - secrets
      verbs:
        - get
  env:
    - name: XDG_CONFIG_HOME
      value: /.config
    - name: SOPS_AGE_KEY_FILE
      value: /.config/sops/age/keys.txt
    - name: KUSTOMIZE_PLUGIN_HOME
      value: /etc/kustomize/plugin
  volumes:
    - name: ksops-generator
      emptyDir: {}
    - name: sops-age
      secret:
        secretName: helm-secrets-private-keys
    - name: setenv-cmp-plugin
      configMap:
        name: setenv-cmp-plugin
  volumeMounts:
    - mountPath: /etc/kustomize/plugin/viaduct.ai/v1/ksops
      name: ksops-generator
    - mountPath: /.config/sops/age/keys.txt
      name: sops-age
      subPath: keys.txt
  initContainers:
    - name: install-ksops-generator
      resources: {}
      image: alpine:latest
      command: ["/bin/sh", "-c"]
      args:
        - |
          set -eux
          apk add --no-cache ca-certificates curl tar
          curl -fsSL -o ksops.tar.gz https://github.com/viaduct-ai/kustomize-sops/releases/download/v4.4.0/ksops_4.4.0_Linux_x86_64.tar.gz
          tar -C /ksops-generator -xzf ksops.tar.gz ksops
          chmod +x /ksops-generator/ksops
      volumeMounts:
        - mountPath: /ksops-generator
          name: ksops-generator
