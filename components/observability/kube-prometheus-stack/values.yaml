---
cleanPrometheusOperatorObjectNames: true
fullnameOverride: prometheus
alertmanager:
  route:
    main:
      enabled: true
      hostnames:
        - alertmanager.${CLUSTER_DOMAIN}
      parentRefs:
        - name: ${GATEWAY_NAME}
          namespace: ${GATEWAY_NAMESPACE}
          sectionName: https
      annotations:
        gethomepage.dev/enabled: "true"
        gethomepage.dev/group: Ingress
        gethomepage.dev/icon: "https://cdn.jsdelivr.net/gh/selfhst/icons/png/pushover.png"
  alertmanagerSpec:
    alertmanagerConfiguration:
      name: alertmanager
      global:
        resolveTimeout: 5m
    externalUrl: https://alertmanager.${CLUSTER_DOMAIN}
    storage:
      volumeClaimTemplate:
        spec:
          storageClassName: ${ARGOCD_ENV_STORAGE_CLASS}
          resources:
            requests:
              storage: 1Gi
kubeApiServer:
  serviceMonitor:
    selector:
      k8s-app: kube-apiserver
kubeScheduler:
  service:
    selector:
      k8s-app: kube-scheduler
kubeControllerManager: &kubeControllerManager
  service:
    selector:
      k8s-app: kube-controller-manager
kubeEtcd:
  <<: *kubeControllerManager # etcd runs on control plane nodes
kubeProxy:
  enabled: false
prometheus:
  route:
    main:
      enabled: true
      hostnames:
        - prometheus.${CLUSTER_DOMAIN}
      parentRefs:
        - name: ${GATEWAY_NAME}
          namespace: ${GATEWAY_NAMESPACE}
          sectionName: https
      annotations:
        gethomepage.dev/enabled: "true"
        gethomepage.dev/group: Ingress
        gethomepage.dev/icon: "https://cdn.jsdelivr.net/gh/selfhst/icons/png/prometheus.png"
  prometheusSpec:
    externalUrl: https://prometheus.${CLUSTER_DOMAIN}
    image:
      registry: docker.io
      repository: prompp/prompp
      tag: 2.53.2-0.4.0
    securityContext:
      runAsNonRoot: true
      runAsUser: 64535
      runAsGroup: 64535
      fsGroup: 64535
    podMonitorSelectorNilUsesHelmValues: false
    probeSelectorNilUsesHelmValues: false
    ruleSelectorNilUsesHelmValues: false
    scrapeConfigSelectorNilUsesHelmValues: false
    serviceMonitorSelectorNilUsesHelmValues: false
    retention: 5d
    retentionSize: 40GB
    resources:
      requests:
        cpu: 100m
      limits:
        memory: 2000Mi
    storageSpec:
      volumeClaimTemplate:
        spec:
          storageClassName: ${ARGOCD_ENV_STORAGE_CLASS}
          resources:
            requests:
              storage: 40Gi
prometheus-node-exporter:
  fullnameOverride: node-exporter
  prometheus:
    monitor:
      enabled: true
      relabelings:
        - action: replace
          regex: (.*)
          replacement: $1
          sourceLabels: ["__meta_kubernetes_pod_node_name"]
          targetLabel: kubernetes_node
kube-state-metrics:
  fullnameOverride: kube-state-metrics
  metricLabelsAllowlist:
    - pods=[*]
    - deployments=[*]
    - persistentvolumeclaims=[*]
  prometheus:
    monitor:
      enabled: true
      relabelings:
        - action: replace
          regex: (.*)
          replacement: $1
          sourceLabels: ["__meta_kubernetes_pod_node_name"]
          targetLabel: kubernetes_node
grafana:
  enabled: false
  forceDeployDashboards: true
additionalPrometheusRulesMap:
  dockerhub-rules:
    groups:
      - name: dockerhub
        rules:
          - alert: DockerhubRateLimitRisk
            annotations:
              summary: Kubernetes cluster Dockerhub rate limit risk
            expr: count(time() - container_last_seen{image=~"(docker.io).*",container!=""} < 30) > 100
            labels:
              severity: critical
  oom-rules:
    groups:
      - name: oom
        rules:
          - alert: OomKilled
            annotations:
              summary: Container {{ $labels.container }} in pod {{ $labels.namespace }}/{{ $labels.pod }} has been OOMKilled {{ $value }} times in the last 10 minutes.
            expr: (kube_pod_container_status_restarts_total - kube_pod_container_status_restarts_total offset 10m >= 1) and ignoring (reason) min_over_time(kube_pod_container_status_last_terminated_reason{reason="OOMKilled"}[10m]) == 1
            labels:
              severity: critical
