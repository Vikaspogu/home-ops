name: PR Webhook Notifications

on:
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  send-webhooks:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5
        with:
          fetch-depth: 0

      - name: Get changed files
        id: changed-files
        uses: tj-actions/changed-files@24d32ffd492484c1d75e0c0b894501ddb9d30d62 # v47
        with:
          files_yaml: |
            cluster01:
              - 'clusters/cluster01/**'
              - 'components/**'
            omv:
              - 'clusters/omv/**'
              - 'components/**'

      - name: Send cluster webhooks
        id: send-cluster-webhooks
        env:
          # Webhook URLs from secrets
          WEBHOOK_URL: ${{ secrets.WEBHOOK_URL }}
          WEBHOOK_SECRET: ${{ secrets.WEBHOOK_SECRET }}

          # Changed files information
          CLUSTER01_CHANGED_FILES: ${{ steps.changed-files.outputs.cluster01_all_changed_files }}
          OMV_CHANGED_FILES: ${{ steps.changed-files.outputs.omv_all_changed_files }}
          CLUSTER01_ANY_CHANGED: ${{ steps.changed-files.outputs.cluster01_any_changed }}
          OMV_ANY_CHANGED: ${{ steps.changed-files.outputs.omv_any_changed }}

          # GitHub event information
          GITHUB_EVENT_ACTION: ${{ github.event.action }}
          GITHUB_REPOSITORY: ${{ github.repository }}
          GITHUB_EVENT_NUMBER: ${{ github.event.number }}

          # Pull Request information
          PR_ID: ${{ github.event.pull_request.id }}
          PR_NODE_ID: ${{ github.event.pull_request.node_id }}
          PR_TITLE: ${{ github.event.pull_request.title }}
          PR_HTML_URL: ${{ github.event.pull_request.html_url }}
          PR_STATE: ${{ github.event.pull_request.state }}
          PR_LOCKED: ${{ github.event.pull_request.locked }}
          PR_BODY: ${{ github.event.pull_request.body }}
          PR_CREATED_AT: ${{ github.event.pull_request.created_at }}
          PR_UPDATED_AT: ${{ github.event.pull_request.updated_at }}
          PR_CLOSED_AT: ${{ github.event.pull_request.closed_at }}
          PR_MERGED_AT: ${{ github.event.pull_request.merged_at }}
          PR_MERGE_COMMIT_SHA: ${{ github.event.pull_request.merge_commit_sha }}
          PR_ASSIGNEE: ${{ github.event.pull_request.assignee }}
          PR_MILESTONE: ${{ github.event.pull_request.milestone }}
          PR_DRAFT: ${{ github.event.pull_request.draft }}
          PR_HEAD_REF: ${{ github.event.pull_request.head.ref }}
          PR_HEAD_SHA: ${{ github.event.pull_request.head.sha }}
          PR_HEAD_LABEL: ${{ github.event.pull_request.head.label }}
          PR_BASE_REF: ${{ github.event.pull_request.base.ref }}
          PR_BASE_SHA: ${{ github.event.pull_request.base.sha }}
          PR_BASE_LABEL: ${{ github.event.pull_request.base.label }}
          PR_AUTHOR_ASSOCIATION: ${{ github.event.pull_request.author_association }}
          PR_AUTO_MERGE: ${{ github.event.pull_request.auto_merge }}
          PR_ACTIVE_LOCK_REASON: ${{ github.event.pull_request.active_lock_reason }}

          # Sender information
          SENDER_LOGIN: ${{ github.event.sender.login }}
          SENDER_ID: ${{ github.event.sender.id }}
          SENDER_NODE_ID: ${{ github.event.sender.node_id }}
          SENDER_AVATAR_URL: ${{ github.event.sender.avatar_url }}
          SENDER_GRAVATAR_ID: ${{ github.event.sender.gravatar_id }}
          SENDER_HTML_URL: ${{ github.event.sender.html_url }}
          SENDER_TYPE: ${{ github.event.sender.type }}
          SENDER_SITE_ADMIN: ${{ github.event.sender.site_admin }}

          # Repository information
          REPO_ID: ${{ github.event.repository.id }}
          REPO_NODE_ID: ${{ github.event.repository.node_id }}
          REPO_NAME: ${{ github.event.repository.name }}
          REPO_HTML_URL: ${{ github.event.repository.html_url }}
          REPO_DESCRIPTION: ${{ github.event.repository.description }}
          REPO_PRIVATE: ${{ github.event.repository.private }}
          REPO_FORK: ${{ github.event.repository.fork }}
          REPO_CREATED_AT: ${{ github.event.repository.created_at }}
          REPO_UPDATED_AT: ${{ github.event.repository.updated_at }}
          REPO_PUSHED_AT: ${{ github.event.repository.pushed_at }}
          REPO_HOMEPAGE: ${{ github.event.repository.homepage }}
          REPO_SIZE: ${{ github.event.repository.size }}
          REPO_STARGAZERS_COUNT: ${{ github.event.repository.stargazers_count }}
          REPO_WATCHERS_COUNT: ${{ github.event.repository.watchers_count }}
          REPO_LANGUAGE: ${{ github.event.repository.language }}
          REPO_HAS_ISSUES: ${{ github.event.repository.has_issues }}
          REPO_HAS_PROJECTS: ${{ github.event.repository.has_projects }}
          REPO_HAS_WIKI: ${{ github.event.repository.has_wiki }}
          REPO_HAS_PAGES: ${{ github.event.repository.has_pages }}
          REPO_HAS_DOWNLOADS: ${{ github.event.repository.has_downloads }}
          REPO_ARCHIVED: ${{ github.event.repository.archived }}
          REPO_DISABLED: ${{ github.event.repository.disabled }}
          REPO_OPEN_ISSUES_COUNT: ${{ github.event.repository.open_issues_count }}
          REPO_LICENSE: ${{ github.event.repository.license }}
          REPO_ALLOW_FORKING: ${{ github.event.repository.allow_forking }}
          REPO_IS_TEMPLATE: ${{ github.event.repository.is_template }}
          REPO_WEB_COMMIT_SIGNOFF_REQUIRED: ${{ github.event.repository.web_commit_signoff_required }}
          REPO_VISIBILITY: ${{ github.event.repository.visibility }}
          REPO_FORKS: ${{ github.event.repository.forks }}
          REPO_OPEN_ISSUES: ${{ github.event.repository.open_issues }}
          REPO_WATCHERS: ${{ github.event.repository.watchers }}
          REPO_DEFAULT_BRANCH: ${{ github.event.repository.default_branch }}

          # Repository owner information
          REPO_OWNER_LOGIN: ${{ github.event.repository.owner.login }}
          REPO_OWNER_ID: ${{ github.event.repository.owner.id }}
          REPO_OWNER_NODE_ID: ${{ github.event.repository.owner.node_id }}
          REPO_OWNER_AVATAR_URL: ${{ github.event.repository.owner.avatar_url }}
          REPO_OWNER_GRAVATAR_ID: ${{ github.event.repository.owner.gravatar_id }}
          REPO_OWNER_HTML_URL: ${{ github.event.repository.owner.html_url }}
          REPO_OWNER_TYPE: ${{ github.event.repository.owner.type }}
          REPO_OWNER_SITE_ADMIN: ${{ github.event.repository.owner.site_admin }}

          # Installation information
          INSTALLATION_ID: ${{ github.event.installation.id }}
          INSTALLATION_NODE_ID: ${{ github.event.installation.node_id }}

          # GitHub webhook headers
          X_GITHUB_EVENT: ${{ github.event_name }}
          X_GITHUB_DELIVERY: ${{ github.run_id }}
          X_HUB_SIGNATURE_256: ${{ github.event.head_commit.id }}
          X_GITHUB_HOOK_ID: ${{ github.event.repository.hooks_url }}
          X_GITHUB_HOOK_INSTALLATION_TARGET_ID: ${{ github.event.installation.id }}
          X_GITHUB_HOOK_INSTALLATION_TARGET_TYPE: ${{ github.event.installation.target_type }}
        run: |
          # Debug: Show critical GitHub context
          echo "🔍 GitHub Event Debug Info:"
          echo "  Event Name: ${{ github.event_name }}"
          echo "  Event Action: '${{ github.event.action }}'"
          echo "  Repository: ${{ github.repository }}"
          echo "  PR Number: ${{ github.event.number }}"
          echo "  Run ID: ${{ github.run_id }}"

          # Use the webhook script from the scripts directory with summary generation
          ./scripts/send-webhooks.sh --results-file /tmp/webhook-results.txt --summary --verbose

          # Read results for the next step if needed
          if [[ -f /tmp/webhook-results.txt ]]; then
            cat /tmp/webhook-results.txt >> $GITHUB_OUTPUT
          else
            echo "webhook_results=error:no_results_file" >> $GITHUB_OUTPUT
          fi

      - name: Workflow completed
        run: |
          echo "✅ Webhook processing completed. Check the summary above for details."
