name: PR Webhook Notifications

on:
  pull_request:
    types: [opened, synchronize]

jobs:
  send-webhooks:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get changed files
        id: changed-files
        uses: tj-actions/changed-files@v44
        with:
          files_yaml: |
            cluster01:
              - 'clusters/cluster01/**'
              - 'components/**'
            omv:
              - 'clusters/omv/**'
              - 'components/**'

      - name: Send cluster webhooks
        id: send-cluster-webhooks
        env:
          # Webhook URLs from secrets
          CLUSTER01_WEBHOOK_URL: ${{ secrets.CLUSTER01_WEBHOOK_URL }}
          OMV_WEBHOOK_URL: ${{ secrets.OMV_WEBHOOK_URL }}

          # Changed files information
          CLUSTER01_CHANGED_FILES: ${{ steps.changed-files.outputs.cluster01_all_changed_files }}
          OMV_CHANGED_FILES: ${{ steps.changed-files.outputs.omv_all_changed_files }}
          CLUSTER01_ANY_CHANGED: ${{ steps.changed-files.outputs.cluster01_any_changed }}
          OMV_ANY_CHANGED: ${{ steps.changed-files.outputs.omv_any_changed }}

          # GitHub event information
          GITHUB_EVENT_ACTION: ${{ github.event.action }}
          GITHUB_REPOSITORY: ${{ github.repository }}
          GITHUB_EVENT_NUMBER: ${{ github.event.number }}
          PR_TITLE: ${{ github.event.pull_request.title }}
          PR_HTML_URL: ${{ github.event.pull_request.html_url }}
          PR_STATE: ${{ github.event.pull_request.state }}
          PR_HEAD_REF: ${{ github.event.pull_request.head.ref }}
          PR_HEAD_SHA: ${{ github.event.pull_request.head.sha }}
          PR_BASE_REF: ${{ github.event.pull_request.base.ref }}
          PR_BASE_SHA: ${{ github.event.pull_request.base.sha }}
          SENDER_LOGIN: ${{ github.event.sender.login }}
          SENDER_HTML_URL: ${{ github.event.sender.html_url }}
          REPO_HTML_URL: ${{ github.event.repository.html_url }}
        run: |
          # Use the webhook script from the scripts directory with summary generation
          ./scripts/send-webhooks.sh --results-file /tmp/webhook-results.txt --summary

          # Read results for the next step if needed
          if [[ -f /tmp/webhook-results.txt ]]; then
            cat /tmp/webhook-results.txt >> $GITHUB_OUTPUT
          else
            echo "webhook_results=error:no_results_file" >> $GITHUB_OUTPUT
          fi

      - name: Workflow completed
        run: |
          echo "âœ… Webhook processing completed. Check the summary above for details."
